<n:LightWindow x:Name="RecorderLightWindow" x:Class="ScreenToGif.Windows.Recorder"
               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
               xmlns:n="clr-namespace:ScreenToGif.Controls"
               xmlns:u="clr-namespace:ScreenToGif.Util"
               xmlns:c="clr-namespace:ScreenToGif.Util.Converters"
               Title="ScreenToGif" SnapsToDevicePixels="True" UseLayoutRounding="True" AllowsTransparency="True" WindowStyle="None" 
               Topmost="True" Icon="../Resources/Logo.ico" Child="{StaticResource Vector.Back}"
               IsThin="{Binding RecorderThinMode, Source={x:Static u:UserSettings.All}}"
               IsFollowing="{Binding CursorFollowing, Source={x:Static u:UserSettings.All}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
               Width="{Binding Source={x:Static u:UserSettings.All}, Path=RecorderWidth, Mode=TwoWay}" 
               Height="{Binding Source={x:Static u:UserSettings.All}, Path=RecorderHeight, Mode=TwoWay}" 
               FocusManager.FocusedElement="{Binding RelativeSource={x:Static RelativeSource.Self}, Mode=OneTime}"
               SizeChanged="LightWindow_SizeChanged" Loaded="Window_Loaded" Closing="Window_Closing" 
               LocationChanged="Window_LocationChanged" Activated="Window_Activated">

    <Window.Resources>
        <Storyboard x:Key="ShowDiscardStoryboard">
            <BooleanAnimationUsingKeyFrames Storyboard.TargetName="DiscardButton" Storyboard.TargetProperty="IsHitTestVisible" Duration="0:0:0" >
                <DiscreteBooleanKeyFrame Value="True" KeyTime="0:0:0"/>
            </BooleanAnimationUsingKeyFrames>

            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DiscardButton" Storyboard.TargetProperty="Visibility" Duration="0:0:0">
                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="0:0:0"/>
            </ObjectAnimationUsingKeyFrames>

            <DoubleAnimation Storyboard.TargetName="DiscardButton" Storyboard.TargetProperty="(Button.Opacity)" From="0" To="1" Duration="0:0:1">
                <DoubleAnimation.EasingFunction>
                    <PowerEase Power="8" />
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
        </Storyboard>

        <Storyboard x:Key="HideDiscardStoryboard">
            <BooleanAnimationUsingKeyFrames Storyboard.TargetName="DiscardButton" Storyboard.TargetProperty="IsHitTestVisible" Duration="0:0:0" >
                <DiscreteBooleanKeyFrame Value="False" KeyTime="0:0:0"/>
            </BooleanAnimationUsingKeyFrames>

            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DiscardButton" Storyboard.TargetProperty="Visibility" Duration="0:0:0">
                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="0:0:0"/>
            </ObjectAnimationUsingKeyFrames>

            <DoubleAnimation Storyboard.TargetName="DiscardButton" Storyboard.TargetProperty="(Button.Opacity)" 
                             From="{Binding ElementName=DiscardButton,Path=Opacity}" To="0" Duration="0:0:1">
                <DoubleAnimation.EasingFunction>
                    <PowerEase Power="8" />
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
        </Storyboard>

        <Storyboard x:Key="HideWindowStoryboard" FillBehavior="Stop" DesiredFrameRate="60" SpeedRatio="2">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RecorderLightWindow" Storyboard.TargetProperty="(Window.Opacity)" Duration="0:0:0.1" FillBehavior="Stop">
                <DiscreteDoubleKeyFrame Value="0" KeyTime="0:0:0"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="ShowWindowStoryboard" FillBehavior="Stop" DesiredFrameRate="60">
            <DoubleAnimation Storyboard.TargetName="RecorderLightWindow" Storyboard.TargetProperty="(Window.Opacity)" 
                             From="{Binding ElementName=DashedRectangle,Path=Opacity}" To="1" Duration="0:0:1" FillBehavior="Stop">
                <DoubleAnimation.EasingFunction>
                    <PowerEase Power="8"/>
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
        </Storyboard>
        
        <c:StageToButtonString x:Key="StageToButtonStringConverter"/>
        <c:StageToCanvas x:Key="StageToCanvasConverter"/>
        <c:ShortcutKeys x:Key="ShortcutKeys"/>
        <c:InvertedBoolToVisibility x:Key="InvertedBoolToVisibility"/>
        <c:BoolOrToInvertedVisibility x:Key="BoolOrToInvertedVisibility"/>
        <c:IntToString x:Key="IntToStringConverter"/>
    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="{StaticResource Command.Options}" CanExecute="Options_CanExecute" Executed="Options_Executed"/>
        <CommandBinding Command="{StaticResource Command.EnableSnapshot}" CanExecute="EnableSnapshot_CanExecute" Executed="EnableSnapshot_Executed"/>
        <CommandBinding Command="{StaticResource Command.EnableThinMode}" CanExecute="EnableThinMode_CanExecute" Executed="EnableThinMode_Executed"/>
        <CommandBinding Command="{StaticResource Command.EnableSnapToWindow}" CanExecute="SnapToWindow_CanExecute"/>
    </Window.CommandBindings>

    <Grid x:Name="OutterGrid" UseLayoutRounding="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="31"/>
        </Grid.RowDefinitions>
        
        <!--Hollow part-->
        <Border BorderBrush="{Binding ElementName=RecorderLightWindow, Path=BorderBrush}" BorderThickness="{Binding ElementName=RecorderLightWindow, Path=BorderThickness}"/>

        <!--Command bar-->
        <Grid Grid.Row="1" x:Name="LowerGrid" Height="31" VerticalAlignment="Bottom" Background="{Binding ElementName=RecorderLightWindow, Path=Background}" 
              KeyboardNavigation.TabNavigation="Cycle" MouseLeftButtonDown="CommandGrid_MouseLeftButtonDown">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="0" Visibility="{Binding RecorderThinMode, Source={x:Static u:UserSettings.All}, Converter={StaticResource Bool2Visibility}}">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <n:ImageButton Grid.Row="0" Grid.Column="0" x:Name="BackButton" Content="{StaticResource Vector.Back}" Style="{StaticResource Style.Button.NoText}"
                               ContentHeight="14" Padding="4,1" TabIndex="0" Click="BackButton_Click"/>

                <n:ImageButton Grid.Row="1" Grid.Column="0" x:Name="CloseButton" Content="{StaticResource Vector.Close}" Style="{StaticResource Style.Button.NoText}"
                               ContentHeight="10" Padding="4,1" TabIndex="1" Click="CloseButton_Click"/>

                <TextBlock Grid.Row="0" Grid.Column="1" x:Name="CaptionText" Text="{Binding Title, ElementName=RecorderLightWindow}" FontFamily="Segoe UI" FontSize="12"
                           FontWeight="Regular" Margin="5,0,0,0" Foreground="{DynamicResource Element.Foreground}" Effect="{DynamicResource Shadow.Foreground.Small}"/>

                <TextBlock Grid.Row="1" Grid.Column="1" x:Name="FrameCountTextBlock" Text="{Binding FrameCount, ElementName=RecorderLightWindow, Converter={StaticResource IntToStringConverter}}" 
                           FontFamily="Segoe UI" FontSize="12" FontWeight="Regular" Margin="5,0,0,0" Foreground="{DynamicResource Element.Foreground.Header}" Effect="{DynamicResource Shadow.Foreground.Small}"/>
            </Grid>

            <StackPanel Grid.Column="1" x:Name="ControlStackPanel" Height="31" Orientation="Horizontal" HorizontalAlignment="Right"
                        ScrollViewer.VerticalScrollBarVisibility="Disabled">

                <Viewbox Child="{StaticResource Vector.Cursor}" Margin="5,4" ToolTip="Cursor following is enabled!" 
                         Visibility="{Binding ElementName=RecorderLightWindow, Path=IsFollowing, Converter={StaticResource Bool2Visibility}, FallbackValue=False}"/>

                <n:ImageButton x:Name="SnapButton" Content="{StaticResource Vector.Crosshair}" Margin="0" Style="{StaticResource Style.Button.NoText}" 
                               HorizontalContentAlignment="Center" ContentHeight="20" ContentWidth="20"
                               Command="{StaticResource Command.EnableSnapToWindow}" Padding="3" TabIndex="2" PreviewMouseDown="SnapButton_PreviewMouseDown">
                    <n:ImageButton.ToolTip>
                        <ToolTip HorizontalOffset="-5" Placement="Bottom" Content="{DynamicResource Recorder.SnapToWindow}"/>
                    </n:ImageButton.ToolTip>
                </n:ImageButton>

                <n:ImageButton x:Name="OptionsButton" Content="{StaticResource Vector.Options}" Margin="0" Style="{StaticResource Style.Button.NoText}" 
                               ContentHeight="20" ContentWidth="20" Command="{StaticResource Command.Options}" Padding="3" TabIndex="3">
                    <n:ImageButton.ToolTip>
                        <ToolTip HorizontalOffset="-5" Placement="Bottom" Content="{DynamicResource Options}"/>
                    </n:ImageButton.ToolTip>
                </n:ImageButton>

                <Separator Width="1" Margin="5,2"/>

                <Viewbox Stretch="UniformToFill" ClipToBounds="True" Focusable="False">
                    <Viewbox.Visibility>
                        <MultiBinding Converter="{StaticResource BoolOrToInvertedVisibility}">
                            <Binding Path="RecorderThinMode" Source="{x:Static u:UserSettings.All}"/>
                            <Binding Path="SnapshotMode" Source="{x:Static u:UserSettings.All}"/>
                        </MultiBinding>
                    </Viewbox.Visibility>

                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center" FlowDirection="LeftToRight" Margin="-4" Opacity="{DynamicResource Element.Opacity}">
                        <n:CircularProgressBar StrokeThickness="2" Percentage="100" SegmentColor="Gray" Radius="24" IsTabStop="False"/>
                        <n:CircularProgressBar StrokeThickness="22" Percentage="100" SegmentColor="#FFF0F1F1" Radius="10" IsTabStop="False"/>

                        <n:CircularProgressBar StrokeThickness="2" Value="{Binding ElementName=FpsIntegerUpDown, Path=Value, Mode=OneWay}" 
                                               IsInverted="True" Minimum="1" Maximum="60" SegmentColor="#FFE28A73" Radius="24" IsTabStop="False"/>
                        <n:CircularProgressBar StrokeThickness="22" Value="{Binding ElementName=FpsIntegerUpDown, Path=Value, Mode=OneWay}" 
                                               IsInverted="True" Minimum="1" Maximum="60" SegmentColor="#FFE28A73" Radius="10" IsTabStop="False"/>
                    </Grid>

                    <Viewbox.ToolTip>
                        <ToolTip HorizontalOffset="-5" Placement="Bottom" Content="{DynamicResource Recorder.FpsRange}"/>
                    </Viewbox.ToolTip>
                </Viewbox>

                <n:IntegerUpDown x:Name="FpsIntegerUpDown" Margin="1,3" StepValue="1" Minimum="1" Maximum="60" MinWidth="45" TabIndex="4"
                                 Value="{Binding Source={x:Static u:UserSettings.All}, Path=LatestFps, Mode=TwoWay}"
                                 Visibility="{Binding SnapshotMode, Source={x:Static u:UserSettings.All}, Converter={StaticResource InvertedBoolToVisibility}}">
                    <n:IntegerUpDown.ToolTip>
                        <ToolTip HorizontalOffset="-5" Placement="Bottom" Content="{DynamicResource Recorder.Fps}"/>
                    </n:IntegerUpDown.ToolTip>
                </n:IntegerUpDown>

                <Label Content="{StaticResource Recorder.Fps.Short}" FontSize="12" FontFamily="Segoe UI" Margin="1,0,0,0" VerticalContentAlignment="Center" Padding="0" 
                       Foreground="{Binding ElementName=RecorderLightWindow, Path=Foreground}" Visibility="{Binding SnapshotMode, Source={x:Static u:UserSettings.All}, Converter={StaticResource InvertedBoolToVisibility}}"/>

                <Separator Width="1" Margin="5,2" Visibility="{Binding SnapshotMode, Source={x:Static u:UserSettings.All}, Converter={StaticResource InvertedBoolToVisibility}}"/>

                <!--<Viewbox Child="{StaticResource Vector.WidthHeight}" Stretch="UniformToFill" Margin="3,4" HorizontalAlignment="Right" FlowDirection="LeftToRight" SnapsToDevicePixels="True"
                             Visibility="{Binding RecorderThinMode, Converter={StaticResource InvertedBoolToVisibility}, Source={x:Static u:UserSettings.All}}"/>-->

                <n:IntegerBox x:Name="WidthIntegerBox" Value="{Binding Source={x:Static u:UserSettings.All}, Path=RecorderWidth, Mode=TwoWay}"
                              Offset="{x:Static u:Constants.HorizontalOffset}" Minimum="100" Maximum="3000" TabIndex="6" Height="Auto" Padding="4,0" Margin="1,3"
                              ToolTip="{DynamicResource Recorder.Width}" ToolTipService.Placement="Bottom" ToolTipService.HorizontalOffset="-5"/>

                <Label Content="×" FontSize="16" FontFamily="Segoe Script" Margin="1" VerticalContentAlignment="Center" Padding="0" 
                       Foreground="{Binding ElementName=RecorderLightWindow, Path=Foreground}"/>

                <n:IntegerBox x:Name="HeightIntegerBox" Value="{Binding Source={x:Static u:UserSettings.All}, Path=RecorderHeight, Mode=TwoWay}"
                              Offset="{x:Static u:Constants.VerticalOffset}" Minimum="100" Maximum="3000" TabIndex="7" Height="Auto" Padding="4,0" Margin="1,3"
                              ToolTip="{DynamicResource Recorder.Height}" ToolTipService.Placement="Bottom" ToolTipService.HorizontalOffset="-5"/>

                <Label Content="px" FontSize="12" FontFamily="Segoe UI" Margin="1,0,0,0" VerticalContentAlignment="Center" Padding="0" 
                       Foreground="{Binding ElementName=RecorderLightWindow, Path=Foreground}"/>

                <Separator Width="1" Margin="5,2"/>

                <n:ImageButton x:Name="DiscardButton" Text="{DynamicResource Recorder.Discard}" Content="{StaticResource Vector.Remove}" Visibility="Collapsed" 
                               Click="DiscardButton_Click" Style="{StaticResource Style.Button.Horizontal}"
                               Foreground="{Binding ElementName=RecorderLightWindow, Path=Foreground}"
                               UseLayoutRounding="True" MaxSize="16" ContentHeight="18" ContentWidth="18" TabIndex="8" 
                               MinWidth="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ActualHeight}"
                               KeyGesture="{Binding Converter={StaticResource ShortcutKeys}, ConverterParameter='3'}"/>

                <!--ToolTip="{Binding Source={x:Static properties:Settings.Default}, Path=StartPauseKey, Converter={StaticResource KeysToStringConverter}}" ToolTipService.Placement="Bottom"-->
                <n:ImageButton x:Name="RecordPauseButton" UseLayoutRounding="True" MaxSize="16" ContentHeight="18" ContentWidth="18" TabIndex="9" 
                               Text="{Binding Stage, ElementName=RecorderLightWindow, Converter={StaticResource StageToButtonStringConverter}, FallbackValue={StaticResource Recorder.Record}}" 
                               Content="{Binding Stage, ElementName=RecorderLightWindow, Converter={StaticResource StageToCanvasConverter}, FallbackValue={StaticResource Vector.Record}}" 
                               Click="RecordPauseButton_Click" Style="{StaticResource Style.Button.Horizontal}"
                               Foreground="{Binding ElementName=RecorderLightWindow, Path=Foreground}" 
                               MinWidth="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ActualHeight}"
                               KeyGesture="{Binding Converter={StaticResource ShortcutKeys}, ConverterParameter='1'}">
                    <n:ImageButton.ContextMenu>
                        <ContextMenu>
                            <n:ImageMenuItem Header="{DynamicResource Recorder.RecordingOptions}" IsHitTestVisible="False" Image="{StaticResource Vector.Record}" ContentHeight="16" ContentWidth="16"/>
                            <Separator/>
                            <n:ImageMenuItem Header="{DynamicResource Recorder.Snapshot}" IsCheckable="True" Image="{StaticResource Vector.Camera.Add}" ContentHeight="16" ContentWidth="16" 
                                             IsChecked="{Binding SnapshotMode, Source={x:Static u:UserSettings.All}, Mode=TwoWay}" Command="{StaticResource Command.EnableSnapshot}"/>

                            <n:ImageMenuItem x:Name="ThinModeMenuItem" Header="{DynamicResource Recorder.ThinMode}" IsCheckable="True" Image="{StaticResource Vector.Application}" ContentHeight="16" ContentWidth="16"
                                             IsChecked="{Binding RecorderThinMode, Source={x:Static u:UserSettings.All}, Mode=TwoWay}" Command="{StaticResource Command.EnableThinMode}"/>
                        </ContextMenu>
                    </n:ImageButton.ContextMenu>
                </n:ImageButton>

                <n:ImageButton x:Name="StopButton" Text="{DynamicResource Recorder.Stop}" Content="{StaticResource Vector.Stop}"
                               Click="StopButton_Click" Style="{StaticResource Style.Button.Horizontal}"
                               Foreground="{Binding ElementName=RecorderLightWindow, Path=Foreground}"
                               UseLayoutRounding="True" MaxSize="16" ContentHeight="18" ContentWidth="18" Margin="0" TabIndex="10" 
                               MinWidth="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ActualHeight}"
                               KeyGesture="{Binding Converter={StaticResource ShortcutKeys}, ConverterParameter='2'}"/>
            </StackPanel>
        </Grid>
    </Grid>
</n:LightWindow>